#!/usr/bin/env bash

set -euo pipefail

[[ -z ${ASDF_INSTALL_TYPE} ]] && echo "ASDF_INSTALL_TYPE is required" && exit 1
[[ -z ${ASDF_INSTALL_VERSION} ]] && echo "ASDF_INSTALL_VERSION is required" && exit 1
[[ -z ${ASDF_INSTALL_PATH} ]] && echo "ASDF_INSTALL_PATH is required" && exit 1
[[ ${ASDF_INSTALL_TYPE} != version ]] && echo "install type '${ASDF_INSTALL_TYPE}' is not supported." && exit 1

arch=$(uname -m)
if [[ ${arch} == x86_64 ]]; then
  arch=amd64
elif [[ ${arch} == aarch64 ]]; then
  arch=arm64
fi

platform="$(uname | tr A-Z a-z)"
if [[ ! (${platform} == linux || ${platform} == darwin) ]]; then
  echo "Unsupported platform '${platform}' found. Only Linux and Darwin are supported."
  exit 1
fi

tmp_dir=$(mktemp -d -t nova_XXXX)
cleanup() {
  rm -rf ${tmp_dir}
}
trap cleanup INT TERM EXIT

install() {
  local version=$1
  local install_path="$2//bin/"
  local bin_path="${install_path}/nova"

  local download_url
  download_url="https://github.com/FairwindsOps/Nova/releases/download/${version}/Nova_${version}_${platform}_${arch}.tar.gz"

  mkdir -p "${install_path}"

  cd ${tmp_dir}
  echo "Downloading nova from ${download_url}"
  curl -L "$download_url" -o "${tmp_dir}/nova_${platform}_${version}.tar.gz"
  tar -xzf ${tmp_dir}/nova_${platform}_${version}.tar.gz
  # The tar.gz has the binary with a capital "Nova" so we try to handle both
  # options in case it changes or the filesystem is case sensitive
  { mv ${tmp_dir}/nova ${bin_path} || mv ${tmp_dir}/Nova ${bin_path}; }
  chmod +x "${bin_path}"
  echo; echo "Nova ${version} installed."
}

install ${ASDF_INSTALL_VERSION} ${ASDF_INSTALL_PATH}
